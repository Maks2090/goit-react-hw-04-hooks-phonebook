{"version":3,"sources":["components/ContactFotm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/ContactFotm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","hooks/useLocalStorage.jsx","index.js"],"names":["module","exports","ContactForm","onSubmit","useState","name","setName","number","setNumber","handelChange","e","target","value","reset","className","css","form","preventDefault","idName","uuidv4","id","label","input","onChange","type","pattern","title","required","button","ContactList","getContacts","deleteContact","list","map","contact","item","onClick","Filter","filter","filterList","text","App","key","JSON","parse","window","localStorage","getItem","state","setstate","useEffect","setItem","stringify","useLocalStorage","contacts","setContacts","setFilter","data","find","alert","normalizeFilter","toLowerCase","includes","getList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8IACAA,EAAOC,QAAU,CAAC,KAAO,0BAA0B,MAAQ,2BAA2B,MAAQ,2BAA2B,OAAS,8B,kBCAlID,EAAOC,QAAU,CAAC,OAAS,4BAA4B,KAAO,0BAA0B,KAAO,4B,iBCA/FD,EAAOC,QAAU,CAAC,KAAO,qBAAqB,MAAQ,wB,iLCIvC,SAASC,EAAT,GAAmC,IAAZC,EAAW,EAAXA,SAEpC,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEMC,EAAc,SAAAC,GACd,MAAoBA,EAAEC,OAAhBN,EAAN,EAAMA,KAAMO,EAAZ,EAAYA,MACZ,OAAOP,GACH,IAAK,OACLC,EAAQM,GACR,MAEA,IAAK,SACLJ,EAAUI,GACV,MAEA,QACA,SAkBFC,EAAQ,WACVP,EAAQ,IACRE,EAAU,KAIhB,OACE,uBAAMM,UAAWC,IAAIC,KAAMb,SArBP,SAAAO,GAChBA,EAAEO,iBACF,IAAIC,EAASC,cAObhB,EANc,CACViB,GAAIF,EACJb,KAAMA,EACNE,OAAQA,IAKZM,KAUJ,UAGI,wBAAOC,UAAWC,IAAIM,MAAtB,iBAEI,uBACIP,UAAWC,IAAIO,MACfV,MAAOP,EACPkB,SAAUd,EACVe,KAAK,OACLnB,KAAK,OACLoB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAQhB,wBAAOb,UAAWC,IAAIM,MAAtB,mBAEI,uBACIP,UAAWC,IAAIO,MACfV,MAAOL,EACPgB,SAAUd,EACVe,KAAK,MACLnB,KAAK,SACLoB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAKhB,wBACIb,UAAWC,IAAIa,OACfJ,KAAK,SAFT,4B,oBC3DOK,MArBf,YAAsD,IAA/BC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,cAChC,OACI,oBAAIjB,UAAWC,IAAIiB,KAAnB,SACKF,EAAYG,KAAI,SAACC,GAAD,OACb,qBAAqBpB,UAAWC,IAAIoB,KAApC,UAEKD,EAAQ7B,KAFb,KAEqB6B,EAAQ3B,OAEzB,wBACIO,UAAWC,IAAIa,OACfJ,KAAK,SACLY,QAAS,kBAAML,EAAcG,IAHjC,sBAJKA,EAAQd,U,gBCkBlBiB,MAtBf,YAAyC,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,WACtB,OACI,gCACI,mBAAGzB,UAAWC,IAAIyB,KAAlB,mCACA,uBACI1B,UAAWC,IAAIO,MACfE,KAAK,OACLnB,KAAK,SACLoB,QAAQ,yHACRC,MAAM,kcACNH,SAAUgB,EACV3B,MAAO0B,QCJR,SAASG,IAErB,MCVY,SAA0BC,EAAI9B,GACzC,MAA0BR,oBAAS,WAAM,IAAD,EAAE,iBAAOuC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQL,WAA9C,QAAuD9B,KAAjG,mBAAOoC,EAAP,KAAcC,EAAd,KAQA,OANAC,qBAAU,WAERL,OAAOC,aAAaK,QAAST,EAAKC,KAAKS,UAAUJ,MAEjD,CAACN,EAAIM,IAEA,CAACA,EAAOC,GDCgBI,CAAgB,WAAY,IAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA4BnD,mBAAS,IAArC,mBAAOkC,EAAP,KAAekB,EAAf,KAmCD,OACE,gCACE,oBAAI1C,UAAU,QAAd,wBAEA,cAACZ,EAAD,CACEC,SArCqB,SAACsD,GAENH,EAASI,MAAK,SAACxB,GACjC,OAAOA,EAAQ7B,OAASoD,EAAKpD,QAM3BsD,MAAM,GAAD,OAAIF,EAAKpD,KAAT,2BAFLkD,EAAY,CAACE,GAAF,mBAAWH,QAiCxB,oBAAIxC,UAAU,QAAd,sBAEA,cAAC,EAAD,CAAQwB,OAAQA,EACdC,WAhBa,SAAC7B,GAClB8C,EAAU9C,EAAEC,OAAOC,UAkBjB,cAAC,EAAD,CACEkB,YAlCU,WAEd,IAAM8B,EAAkBtB,EAAOuB,cAE/B,OAAOP,EAAShB,QAAO,SAACJ,GAAD,OACrBA,EAAQ7B,KAAKwD,cAAcC,SAASF,MA6BrBG,GACbhC,cA1BgB,SAAC0B,GACrB,OAAOF,EAAYD,EAAShB,QAAO,SAACJ,GAAD,OAAaA,EAAQd,KAAOqC,EAAKrC,aEjCxE4C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4f004527.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__zZBvn\",\"label\":\"ContactForm_label__2GCog\",\"input\":\"ContactForm_input__2AeiT\",\"button\":\"ContactForm_button__1fOLm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactList_button__3xIAz\",\"list\":\"ContactList_list__3faw0\",\"item\":\"ContactList_item__2VPoB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Filter_text__1FTC3\",\"input\":\"Filter_input__1ARCd\"};","import {useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport css from '../ContactFotm/ContactForm.module.css'\r\n\r\nexport default function ContactForm ({onSubmit}) {\r\n    \r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handelChange= e =>{\r\n        const{name, value}= e.target;\r\n        switch(name){\r\n            case 'name':\r\n            setName(value)\r\n            break;\r\n\r\n            case 'number':\r\n            setNumber(value)\r\n            break;\r\n\r\n            default:\r\n            return;\r\n        }\r\n    }\r\n\r\n  const  handelSubmit = e => {\r\n        e.preventDefault();\r\n        let idName = uuidv4();\r\n        const total = {\r\n            id: idName,\r\n            name: name,\r\n            number: number,\r\n        }\r\n\r\n        onSubmit(total)\r\n\r\n        reset();\r\n    }\r\n\r\n    const reset = () => {\r\n        setName(\"\");\r\n        setNumber(\"\")\r\n    }\r\n\r\n\r\n  return (\r\n    <form className={css.form} onSubmit={handelSubmit}>\r\n\r\n\r\n        <label className={css.label}>\r\n            Name\r\n            <input\r\n                className={css.input}\r\n                value={name}\r\n                onChange={handelChange}\r\n                type=\"text\"\r\n                name=\"name\"\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                required\r\n            >\r\n\r\n            </input>\r\n        </label>\r\n\r\n\r\n\r\n        <label className={css.label}>\r\n            Number\r\n            <input\r\n                className={css.input}\r\n                value={number}\r\n                onChange={handelChange}\r\n                type=\"tel\"\r\n                name=\"number\"\r\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                required\r\n            />\r\n        </label>\r\n\r\n\r\n        <button\r\n            className={css.button}\r\n            type=\"submit\">\r\n            Add contact\r\n        </button>\r\n\r\n\r\n    </form>\r\n)\r\n\r\n}\r\n\r\n\r\nContactForm.propTypes = {\r\n    onSubmit: PropTypes.func,\r\n};","import PropTypes from \"prop-types\";\r\nimport css from '../ContactList/ContactList.module.css'\r\n\r\nfunction ContactList({ getContacts, deleteContact }) {\r\n    return (\r\n        <ul className={css.list}>\r\n            {getContacts.map((contact) => (\r\n                <li key={contact.id} className={css.item} >\r\n\r\n                    {contact.name}: {contact.number}\r\n\r\n                    <button\r\n                        className={css.button}\r\n                        type=\"submit\"\r\n                        onClick={() => deleteContact(contact)}\r\n                    >\r\n                        Delete\r\n                    </button>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default ContactList\r\n\r\nContactList.propTypes = {\r\n    getContacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string,\r\n            name: PropTypes.string,\r\n            number: PropTypes.string,\r\n        })\r\n    ),\r\n};","import PropTypes from \"prop-types\";\r\nimport css from '../Filter/Filter.module.css'\r\n\r\nfunction Filter({ filter, filterList }) {\r\n    return (\r\n        <div>\r\n            <p className={css.text}>Find contacts by name</p>\r\n            <input\r\n                className={css.input}\r\n                type=\"text\"\r\n                name=\"filter\"\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                onChange={filterList}\r\n                value={filter}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nFilter.propTypes = {\r\n    filter: PropTypes.string,\r\n    formSubmitHandler: PropTypes.func,\r\n};\r\n\r\nexport default Filter;","import {useState} from 'react';\nimport './App.css';\nimport PropTypes from \"prop-types\";\nimport ContactForm from './components/ContactFotm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\nimport useLocalStorage from './hooks/useLocalStorage';\n\n\n\nexport default function App(){\n\n   const [contacts, setContacts] = useLocalStorage('contacts', [])\n   const [filter, setFilter] = useState('');\n\n   \n  const  formSubmitHandler = (data) => {\n\n    const findContact = contacts.find((contact) => {\n      return contact.name === data.name;\n    });\n\n    !findContact\n      ? setContacts([data, ...contacts])\n      \n      : alert(`${data.name} is already in contact`);\n\n  }\n\n  const getList = () => {\n    \n    const normalizeFilter = filter.toLowerCase();\n\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizeFilter)\n    );\n  };\n\n  const deleteContact = (data) => {\n    return setContacts(contacts.filter((contact) => contact.id !== data.id))\n  };\n  \n\n  const filterList = (e) => {\n    setFilter(e.target.value);\n  };\n\n\n  return (\n    <div>\n      <h1 className=\"title\"> Phonebook</h1>\n\n      <ContactForm\n        onSubmit={formSubmitHandler}\n      />\n\n      <h2 className=\"title\">Contacts</h2>\n\n      <Filter filter={filter}\n        filterList={filterList}\n      />\n\n      <ContactList\n        getContacts={getList()}\n        deleteContact={deleteContact}\n      />\n    </div>\n  )\n}\n\n\nApp.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n};","import {useState, useEffect} from 'react';\r\n\r\nexport default function useLocalStorage (key,value) {\r\n    const [state, setstate] = useState(() =>{ return JSON.parse(window.localStorage.getItem(key)) ?? value})\r\n  \r\n    useEffect(() => {\r\n        \r\n      window.localStorage.setItem( key, JSON.stringify(state))\r\n                       \r\n    },[key,state])\r\n  \r\n    return [state, setstate];\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}